// nextjs/src/app/api/send/route.js
import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

// --- –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–ø—á–∏ –∏–∑ .env ---
const CAPTCHA_SECRET = process.env.CAPTCHA_SECRET;
// --- –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ø—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
const IS_CAPTCHA_DISABLED = process.env.NEXT_PUBLIC_DISABLE_CAPTCHA_FOR_LOCAL_DEV === 'true';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
const logError = (error, context = '') => {
  const timestamp = new Date().toISOString();
  const errorMessage = `[${timestamp}] ${context}: ${error.message}\nStack: ${error.stack}\n`;
  console.error(errorMessage);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –ª–æ–≥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  // –ù–∞–ø—Ä–∏–º–µ—Ä: await logToFile(errorMessage);
};

export async function POST(request) {
  try {
    let formData;
    try {
      formData = await request.json();
    } catch (jsonError) {
      logError(jsonError, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
      return NextResponse.json(
        { 
          status: 'error',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è JSON).' 
        },
        { status: 400 }
      );
    }

    const { name, email, phone, message, smartcaptcha_token } = formData;

    // --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ---
    if (!name || !email || !phone || !message) {
      return NextResponse.json(
        { 
          status: 'error',
          message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.' 
        },
        { status: 400 }
      );
    }

    // --- 2. –í–∞–ª–∏–¥–∞—Ü–∏—è email ---
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { 
          status: 'error',
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.' 
        },
        { status: 400 }
      );
    }

    // --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ ---
    if (!IS_CAPTCHA_DISABLED && CAPTCHA_SECRET) {
      if (!smartcaptcha_token && smartcaptcha_token !== '') {
        return NextResponse.json(
          { 
            status: 'error',
            message: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω –∫–∞–ø—á–∏.' 
          },
          { status: 400 }
        );
      }

      if (smartcaptcha_token === '') {
        console.log('–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –∫–∞–ø—á–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞).');
      } else {
        try {
          const captchaResponse = await fetch(
            `https://smartcaptcha.yandexcloud.net/validate?secret=${CAPTCHA_SECRET}&token=${smartcaptcha_token}&ip=${request.ip || ''}`,
            { 
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
            }
          );

          if (!captchaResponse.ok) {
            throw new Error(`HTTP error! status: ${captchaResponse.status}`);
          }

          const captchaData = await captchaResponse.json();

          if (!captchaData || captchaData.status !== 'ok') {
            const errorCodes = captchaData.error_codes ? captchaData.error_codes.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            return NextResponse.json(
              { 
                status: 'error',
                message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ "–Ø –Ω–µ —Ä–æ–±–æ—Ç" –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ö–æ–¥—ã –æ—à–∏–±–æ–∫: ${errorCodes}` 
              },
              { status: 400 }
            );
          }
        } catch (captchaError) {
          logError(captchaError, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏');
          return NextResponse.json(
            { 
              status: 'error',
              message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
            },
            { status: 500 }
          );
        }
      }
    }

    // --- 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer ---
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT, 10),
      secure: process.env.SMTP_PORT === '465',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
      // –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      connectionTimeout: 10000,
      greetingTimeout: 10000,
      socketTimeout: 10000,
    });

    // --- 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ ---
    const mailOptions = {
      from: `"${process.env.FROM_NAME || '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'}" <${process.env.SMTP_USER}>`,
      to: process.env.TO_EMAIL,
      replyTo: `${name} <${email}>`,
      subject: `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –æ—Ç ${name}`,
      text: `
–ò–º—è: ${name}
Email: ${email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}

–°–æ–æ–±—â–µ–Ω–∏–µ:
${message}
      `,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞</h2>
          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; border-left: 4px solid #2563eb;">
            <p><strong>üë§ –ò–º—è:</strong> ${name}</p>
            <p><strong>üìß Email:</strong> ${email}</p>
            <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
            <p><strong>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
            <div style="background: white; padding: 15px; border-radius: 4px; border: 1px solid #e2e8f0;">
              ${message.replace(/\n/g, '<br>')}
            </div>
          </div>
          <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #e2e8f0; font-size: 12px; color: #64748b;">
            <p><strong>üåê IP:</strong> ${request.ip || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>üïê –í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
          </div>
        </div>
      `,
    };

    // --- 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ ---
    try {
      const info = await transporter.sendMail(mailOptions);
      console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId);

      // --- 7. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ---
      return NextResponse.json(
        { 
          status: 'success',
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
        },
        { status: 200 }
      );

    } catch (emailError) {
      logError(emailError, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
      
      // –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      if (emailError.code === 'EAUTH') {
        errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã.';
      } else if (emailError.code === 'EENVELOPE') {
        errorMessage = '–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/–ø–æ–ª—É—á–∞—Ç–µ–ª—è.';
      } else if (emailError.code === 'ECONNECTION') {
        errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É.';
      }

      return NextResponse.json(
        { 
          status: 'error',
          message: errorMessage 
        },
        { status: 500 }
      );
    }

  } catch (error) {
    logError(error, '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ API');
    return NextResponse.json(
      { 
        status: 'error',
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      },
      { status: 500 }
    );
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': 'https://xn----9sb8ajp.xn--p1ai',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Origin, X-Requested-With',
      'Access-Control-Allow-Credentials': 'true',
    },
  });
}