const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const COMPONENT_DIRS = [
  'src/app/components',
  'src/app/about',
  'src/app/careers', 
  'src/app/cases',
  'src/app/community',
  'src/app/contacts',
  'src/app/licenses',
  'src/app/partners',
  'src/app/services'
];

async function getImageDimensions(imagePath) {
  try {
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    return { width: metadata.width, height: metadata.height };
  } catch (error) {
    console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è ${imagePath}:`, error.message);
    return null;
  }
}

async function processComponentFile(filePath) {
  try {
    let content = await fs.promises.readFile(filePath, 'utf8');
    let modified = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç Next.js Image
    const hasImageImport = content.includes("next/image");
    let needsImageImport = false;

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Image
    const imageRegex = /<Image[^>]*src=["']([^"']+)["'][^>]*>/g;
    
    let match;
    while ((match = imageRegex.exec(content)) !== null) {
      const fullTag = match[0];
      const src = match[1];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å width/height
      if (fullTag.includes('width=') && fullTag.includes('height=')) {
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      let imagePath;
      if (src.startsWith('/')) {
        imagePath = path.join('public', src);
      } else if (src.startsWith('.')) {
        // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å - –≤—ã—á–∏—Å–ª—è–µ–º –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const componentDir = path.dirname(filePath);
        imagePath = path.join(componentDir, src);
      } else {
        imagePath = path.join('public', 'images', src);
      }

      if (fs.existsSync(imagePath)) {
        const dimensions = await getImageDimensions(imagePath);
        if (dimensions) {
          // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ Image —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º width/height
          const newTag = `<Image
            src="${src}"
            width={${dimensions.width}}
            height={${dimensions.height}}
            ${fullTag.includes('alt=') ? '' : 'alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"'}
            ${fullTag.match(/className=["']([^"']*)["']/)?.[0] || ''}
            ${fullTag.includes('priority') ? 'priority' : ''}
          />`.replace(/\n\s+/g, ' ');
          
          content = content.replace(fullTag, newTag);
          modified = true;
          
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è ${path.basename(src)}: ${dimensions.width}x${dimensions.height}`);
        }
      } else {
        console.warn(`‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${imagePath}`);
      }
    }

    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ img –Ω–∞ Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
    const imgRegex = /<img[^>]*src=["']([^"']+)["'][^>]*>/g;
    const imgMatches = [...content.matchAll(imgRegex)];
    
    for (const match of imgMatches) {
      const fullTag = match[0];
      const src = match[1];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ Next.js Image
      if (content.includes('next/image')) continue;

      let imagePath;
      if (src.startsWith('/')) {
        imagePath = path.join('public', src);
      } else if (src.startsWith('.')) {
        const componentDir = path.dirname(filePath);
        imagePath = path.join(componentDir, src);
      } else {
        imagePath = path.join('public', 'images', src);
      }

      if (fs.existsSync(imagePath)) {
        const dimensions = await getImageDimensions(imagePath);
        if (dimensions) {
          const altMatch = fullTag.match(/alt=["']([^"']*)["']/);
          const alt = altMatch ? altMatch[1] : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
          const classNameMatch = fullTag.match(/class(Name)?=["']([^"']*)["']/);
          const className = classNameMatch ? classNameMatch[2] : '';
          
          const newTag = `<Image 
            src="${src}" 
            alt="${alt}" 
            width={${dimensions.width}} 
            height={${dimensions.height}}
            ${className ? `className="${className}"` : ''}
          />`.replace(/\n\s+/g, ' ');
          
          content = content.replace(fullTag, newTag);
          modified = true;
          needsImageImport = true;
          
          console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω img –Ω–∞ Image: ${path.basename(src)}`);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    if (needsImageImport && !hasImageImport) {
      content = `import Image from 'next/image';\n${content}`;
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Image –≤: ${filePath}`);
    }

    if (modified) {
      await fs.promises.writeFile(filePath, content, 'utf8');
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
    }

    return modified;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

async function findAllComponents(dir) {
  const files = [];
  
  try {
    const items = await fs.promises.readdir(dir, { withFileTypes: true });
    
    for (const item of items) {
      const fullPath = path.join(dir, item.name);
      
      if (item.isDirectory()) {
        files.push(...await findAllComponents(fullPath));
      } else if (item.name.match(/\.(jsx|tsx|js)$/)) {
        files.push(fullPath);
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}:`, error.message);
  }
  
  return files;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  let allComponents = [];
  
  for (const dir of COMPONENT_DIRS) {
    if (fs.existsSync(dir)) {
      const components = await findAllComponents(dir);
      allComponents.push(...components);
      console.log(`üìÅ ${dir}: ${components.length} —Ñ–∞–π–ª–æ–≤`);
    }
  }
  
  console.log(`\nüìÅ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${allComponents.length}\n`);
  
  let modifiedCount = 0;
  
  for (const componentFile of allComponents) {
    const modified = await processComponentFile(componentFile);
    if (modified) modifiedCount++;
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('‚ïê'.repeat(50));
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${modifiedCount}`);
  console.log(`üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${allComponents.length}`);
  console.log('üéØ –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ Lighthouse: +10-15 –±–∞–ª–ª–æ–≤');
  console.log('‚ïê'.repeat(50));
  
  if (modifiedCount > 0) {
    console.log('\nüí° –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ git');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É: npm run build');
    console.log('3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å');
  }
}

main().catch(console.error);