const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const rename = promisify(fs.rename);
const unlink = promisify(fs.unlink);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
const OPTIMIZATION_SETTINGS = {
  webp: {
    quality: 80,
    effort: 6
  },
  avif: {
    quality: 75,
    effort: 8
  }
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
const CRITICAL_IMAGES = [
  'bg_Hero.webp',
  'logo.webp',
  'logoInv.webp'
];

// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ (–º–æ–∂–Ω–æ —Å–∏–ª—å–Ω–µ–µ —Å–∂–∞—Ç—å)
const NON_CRITICAL_IMAGES = [
  'team', 'team1', 'team2', 'team3', 'team4', 'team5', 'team6', 'team7', 'team8',
  'Licenses.webp', 'Rost_Sea.webp', 'Main_Bus_Station.webp'
];

async function optimizeImage(inputPath, isCritical = false) {
  try {
    const tempPath = inputPath + '.tmp'; // ‚úÖ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const image = sharp(inputPath);
    const metadata = await image.metadata();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
    const settings = isCritical 
      ? { quality: 85, effort: 6 }
      : { quality: 75, effort: 6 };
    
    // –†–µ—Å–∞–π–∑ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    let processing = image;
    if (metadata.width > 1920) {
      processing = processing.resize(1920, null, {
        withoutEnlargement: true,
        fit: 'inside'
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await processing
      .webp(settings)
      .toFile(tempPath);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    const originalStat = await stat(inputPath);
    const tempStat = await stat(tempPath);
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º
    await rename(tempPath, inputPath);
    
    const originalSize = originalStat.size;
    const optimizedSize = tempStat.size;
    const savings = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
    
    console.log(`‚úÖ ${path.basename(inputPath)}: ${(originalSize/1024).toFixed(0)}KB ‚Üí ${(optimizedSize/1024).toFixed(0)}KB (${savings}% savings)`);
    
    return { originalSize, optimizedSize, savings };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å ${inputPath}:`, error.message);
    return null;
  }
}

async function optimizeSVG(inputPath) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG - —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–≥–æ
    let content = await fs.promises.readFile(inputPath, 'utf8');
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    content = content.replace(/<!--[\s\S]*?-->/g, '');
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    content = content.replace(/\s+/g, ' ').trim();
    
    await fs.promises.writeFile(inputPath, content); // ‚úÖ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    
    const originalStat = await stat(inputPath);
    const originalSize = originalStat.size;
    const optimizedSize = (await stat(inputPath)).size;
    const savings = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
    
    console.log(`‚úÖ SVG ${path.basename(inputPath)}: ${originalSize}KB ‚Üí ${optimizedSize}KB (${savings}% savings)`);
    
    return { originalSize, optimizedSize, savings };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å SVG ${inputPath}:`, error.message);
    return null;
  }
}

async function optimizeAllImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  const imagesDir = path.join(process.cwd(), 'public', 'images');
  const files = await readdir(imagesDir);
  
  let totalOriginalSize = 0;
  let totalOptimizedSize = 0;
  
  for (const file of files) {
    if (file.match(/\.(jpg|jpeg|png|webp)$/i)) {
      const inputPath = path.join(imagesDir, file);
      
      const originalStat = await stat(inputPath);
      const originalSize = originalStat.size;
      
      const isCritical = CRITICAL_IMAGES.some(critical => file.includes(critical));
      const isNonCritical = NON_CRITICAL_IMAGES.some(nonCritical => file.includes(nonCritical));
      
      const result = await optimizeImage(inputPath, isCritical && !isNonCritical);
      
      if (result) {
        totalOriginalSize += originalSize;
        totalOptimizedSize += result.optimizedSize;
      }
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG
    if (file.toLowerCase().endsWith('.svg')) {
      const inputPath = path.join(imagesDir, file);
      
      const originalStat = await stat(inputPath);
      const originalSize = originalStat.size;
      
      const result = await optimizeSVG(inputPath);
      
      if (result) {
        totalOriginalSize += originalSize;
        totalOptimizedSize += result.optimizedSize;
      }
    }
  }
  
  const totalSavings = ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize * 100).toFixed(1);
  
  console.log('\nüìä –ò–¢–û–ì–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
  console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(totalOptimizedSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`üíæ –≠–∫–æ–Ω–æ–º–∏—è: ${totalSavings}%`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizeAllImages().catch(console.error);