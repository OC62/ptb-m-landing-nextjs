const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Promisify –º–µ—Ç–æ–¥—ã fs –¥–ª—è async/await
const readdir = fs.promises.readdir;
const stat = fs.promises.stat;
const rename = fs.promises.rename;
const unlink = fs.promises.unlink;

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
const OPTIMIZATION_SETTINGS = {
  critical: {
    quality: 85,
    effort: 6,
    maxWidth: 1920
  },
  standard: {
    quality: 75, 
    effort: 6,
    maxWidth: 1200
  },
  low: {
    quality: 65,
    effort: 4,
    maxWidth: 800
  }
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (LCP - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
const CRITICAL_IMAGES = [
  'bg_Hero',
  'logo',
  'logoInv',
  'og-preview'
];

// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
const STANDARD_IMAGES = [
  'team-football',
  'team',
  'Licenses',
  'Rost_Sea',
  'Main_Bus_Station',
  'GBUVolgograd',
  'TTans',
  'Ttrans',
  'logoBashkiria',
  'logoKazan',
  'logo_rda',
  'logoAvtodor',
  'LogoDonavto'
];

// –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–µ–ª–æ–∞–¥–µ—Ä—ã, –±—É–∫–≤—ã)
const LOW_PRIORITY_IMAGES = [
  'preloader',
  'letter'
];

// –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const SUPPORTED_FORMATS = ['.jpg', '.jpeg', '.png', '.webp'];
const SVG_FORMATS = ['.svg'];

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function getAllFiles(dir) {
  try {
    const items = await readdir(dir, { withFileTypes: true });
    const files = [];
    
    for (const item of items) {
      const fullPath = path.join(dir, item.name);
      if (item.isDirectory()) {
        files.push(...await getAllFiles(fullPath));
      } else {
        files.push(fullPath);
      }
    }
    
    return files;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
    return [];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function getImagePriority(filename) {
  const baseName = path.basename(filename, path.extname(filename));
  
  if (CRITICAL_IMAGES.some(critical => baseName.includes(critical))) {
    return 'critical';
  }
  if (LOW_PRIORITY_IMAGES.some(low => baseName.includes(low))) {
    return 'low';
  }
  if (STANDARD_IMAGES.some(standard => baseName.includes(standard))) {
    return 'standard';
  }
  
  return 'standard'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function optimizeImage(inputPath) {
  try {
    const priority = getImagePriority(inputPath);
    const settings = OPTIMIZATION_SETTINGS[priority];
    const tempPath = inputPath + '.tmp';
    
    const image = sharp(inputPath);
    const metadata = await image.metadata();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ—Å–∞–π–∑–∏—Ç—å
    let processing = image;
    if (metadata.width > settings.maxWidth) {
      processing = processing.resize(settings.maxWidth, null, {
        withoutEnlargement: true,
        fit: 'inside'
      });
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤ WebP
    await processing
      .webp({
        quality: settings.quality,
        effort: settings.effort,
        smartSubsample: true
      })
      .toFile(tempPath);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    const originalStat = await stat(inputPath);
    const tempStat = await stat(tempPath);
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —ç–∫–æ–Ω–æ–º–∏—è –∏–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (tempStat.size < originalStat.size || priority === 'critical') {
      await rename(tempPath, inputPath);
      
      const savings = ((originalStat.size - tempStat.size) / originalStat.size * 100).toFixed(1);
      console.log(`‚úÖ ${path.basename(inputPath)}: ${(originalStat.size/1024).toFixed(0)}KB ‚Üí ${(tempStat.size/1024).toFixed(0)}KB (${savings}% savings) [${priority}]`);
      
      return { 
        originalSize: originalStat.size, 
        optimizedSize: tempStat.size, 
        savings: parseFloat(savings),
        priority 
      };
    } else {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π
      await unlink(tempPath);
      console.log(`‚ÑπÔ∏è  ${path.basename(inputPath)}: —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω [${priority}]`);
      
      return { 
        originalSize: originalStat.size, 
        optimizedSize: originalStat.size, 
        savings: 0,
        priority 
      };
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${path.basename(inputPath)}:`, error.message);
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      if (fs.existsSync(inputPath + '.tmp')) {
        await unlink(inputPath + '.tmp');
      }
    } catch (cleanupError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    }
    
    return null;
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç SVG —Ñ–∞–π–ª
 */
async function optimizeSVG(inputPath) {
  try {
    let content = await fs.promises.readFile(inputPath, 'utf8');
    const originalSize = Buffer.byteLength(content, 'utf8');
    
    // –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG
    content = content
      .replace(/<!--[\s\S]*?-->/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/>\s+</g, '><') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
      .trim();
    
    await fs.promises.writeFile(inputPath, content);
    
    const optimizedSize = Buffer.byteLength(content, 'utf8');
    const savings = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
    
    console.log(`‚úÖ SVG ${path.basename(inputPath)}: ${(originalSize/1024).toFixed(1)}KB ‚Üí ${(optimizedSize/1024).toFixed(1)}KB (${savings}% savings)`);
    
    return { originalSize, optimizedSize, savings: parseFloat(savings) };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG ${path.basename(inputPath)}:`, error.message);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
async function optimizeAllImages() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  const imagesDir = path.join(process.cwd(), 'public', 'images');
  
  if (!fs.existsSync(imagesDir)) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', imagesDir);
    return;
  }
  
  const allFiles = await getAllFiles(imagesDir);
  let totalOriginalSize = 0;
  let totalOptimizedSize = 0;
  let processedCount = 0;
  let skippedCount = 0;
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}\n`);
  
  for (const filePath of allFiles) {
    const ext = path.extname(filePath).toLowerCase();
    
    if (SUPPORTED_FORMATS.includes(ext)) {
      const result = await optimizeImage(filePath);
      if (result) {
        totalOriginalSize += result.originalSize;
        totalOptimizedSize += result.optimizedSize;
        processedCount++;
      } else {
        skippedCount++;
      }
    } else if (SVG_FORMATS.includes(ext)) {
      const result = await optimizeSVG(filePath);
      if (result) {
        totalOriginalSize += result.originalSize;
        totalOptimizedSize += result.optimizedSize;
        processedCount++;
      } else {
        skippedCount++;
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä –ò–¢–û–ì–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
  console.log('‚ïê'.repeat(50));
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} —Ñ–∞–π–ª–æ–≤`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ñ–∞–π–ª–æ–≤`);
  console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(totalOptimizedSize / 1024 / 1024).toFixed(2)} MB`);
  
  if (totalOriginalSize > 0) {
    const totalSavings = ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize * 100).toFixed(1);
    const savingsMB = ((totalOriginalSize - totalOptimizedSize) / 1024 / 1024).toFixed(2);
    console.log(`üíæ –≠–∫–æ–Ω–æ–º–∏—è: ${totalSavings}% (${savingsMB} MB)`);
    console.log(`üéØ –û—Ü–µ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è Lighthouse: +15-25 –±–∞–ª–ª–æ–≤`);
  }
  
  console.log('‚ïê'.repeat(50));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—É—Å–∫
optimizeAllImages().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});